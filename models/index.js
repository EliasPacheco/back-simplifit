const { sequelize } = require('../config/database');
const TipoUsuario = require('./TipoUsuario');
const Usuario = require('./Usuario');
const Admin = require('./Admin');

// Definir associa√ß√µes
Usuario.belongsTo(TipoUsuario, {
  foreignKey: 'tipoDeProfissional',
  as: 'tipoProfissional'
});

TipoUsuario.hasMany(Usuario, {
  foreignKey: 'tipoDeProfissional',
  as: 'usuarios'
});

// Sincronizar banco de dados
const syncDatabase = async () => {
  try {
    // Sincronizar todas as tabelas
    await sequelize.sync({ 
      force: false, 
      alter: false 
    });
    
    console.log('‚úÖ Tabelas sincronizadas com sucesso!');
    console.log('üìã Tabelas criadas/verificadas:');
    console.log('   - tipos_usuarios');
    console.log('   - usuarios');
    console.log('   - admins');
    
    // Verificar se as tabelas foram criadas
    const tables = await sequelize.getQueryInterface().showAllTables();
    console.log(`üìä Total de tabelas no banco: ${tables.length}`);
    
    // Criar admin padr√£o se n√£o existir
    await criarAdminPadrao();
    
  } catch (error) {
    console.error('‚ùå Erro ao sincronizar banco de dados:', error);
    throw error;
  }
};

// Fun√ß√£o para criar admin padr√£o
const criarAdminPadrao = async () => {
  try {
    const adminExistente = await Admin.findOne({
      where: { email: 'admin@admin.com' }
    });

    if (!adminExistente) {
      await Admin.create({
        email: 'admin@admin.com',
        senha: '123456'
      });
    } else {
      console.log('‚úÖ Admin padr√£o j√° existe!');
    }
  } catch (error) {
    console.error('‚ùå Erro ao criar admin padr√£o:', error);
  }
};

module.exports = {
  sequelize,
  TipoUsuario,
  Usuario,
  Admin,
  syncDatabase
};
